This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
postcss.config.cjs
public/models/robot/license.txt
public/models/robot/scene.gltf
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/index.css
src/main.jsx
src/SpeechStudio.jsx
tailwind.config.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>speech-app</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "speech-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@react-three/drei": "^10.7.6",
    "@react-three/fiber": "^9.3.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "three": "^0.180.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "vite": "^7.1.7"
  }
}
</file>

<file path="postcss.config.cjs">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="public/models/robot/license.txt">
Model Information:
* title:	Robot with two face
* source:	https://sketchfab.com/3d-models/robot-with-two-face-c05ce92f9e62477aa7243935ed553fb7
* author:	Shah Bakhat026 (https://sketchfab.com/bakhats110)

Model License:
* license type:	CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
* requirements:	Author must be credited. Commercial use is allowed.

If you use this 3D model in your project be sure to copy paste this credit wherever you share it:
This work is based on "Robot with two face" (https://sketchfab.com/3d-models/robot-with-two-face-c05ce92f9e62477aa7243935ed553fb7) by Shah Bakhat026 (https://sketchfab.com/bakhats110) licensed under CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
</file>

<file path="public/models/robot/scene.gltf">
{
  "accessors": [
    {
      "bufferView": 2,
      "componentType": 5126,
      "count": 12180,
      "max": [
        0.6336650252342224,
        0.9974830150604248,
        0.5009509921073914
      ],
      "min": [
        -0.6356890201568604,
        -1.0006999969482422,
        -0.502577006816864
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 146160,
      "componentType": 5126,
      "count": 12180,
      "max": [
        0.9999963045120239,
        0.999836266040802,
        0.9999459981918335
      ],
      "min": [
        -0.9999963045120239,
        -0.9990874528884888,
        -0.9999958276748657
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "componentType": 5126,
      "count": 12180,
      "max": [
        0.99951171875,
        0.99951171875
      ],
      "min": [
        0.0007300376892089844,
        0.024993896484375
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "componentType": 5125,
      "count": 57732,
      "type": "SCALAR"
    }
  ],
  "asset": {
    "extras": {
      "author": "Shah Bakhat026 (https://sketchfab.com/bakhats110)",
      "license": "CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)",
      "source": "https://sketchfab.com/3d-models/robot-with-two-face-c05ce92f9e62477aa7243935ed553fb7",
      "title": "Robot with two face"
    },
    "generator": "Sketchfab-16.61.0",
    "version": "2.0"
  },
  "bufferViews": [
    {
      "buffer": 0,
      "byteLength": 230928,
      "name": "floatBufferViews",
      "target": 34963
    },
    {
      "buffer": 0,
      "byteLength": 97440,
      "byteOffset": 230928,
      "byteStride": 8,
      "name": "floatBufferViews",
      "target": 34962
    },
    {
      "buffer": 0,
      "byteLength": 292320,
      "byteOffset": 328368,
      "byteStride": 12,
      "name": "floatBufferViews",
      "target": 34962
    }
  ],
  "buffers": [
    {
      "byteLength": 620688,
      "uri": "scene.bin"
    }
  ],
  "images": [
    {
      "uri": "textures/material_0_baseColor.jpeg"
    }
  ],
  "materials": [
    {
      "doubleSided": true,
      "name": "material_0",
      "pbrMetallicRoughness": {
        "baseColorTexture": {
          "index": 0
        },
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8
      }
    }
  ],
  "meshes": [
    {
      "name": "Object_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 1,
            "POSITION": 0,
            "TEXCOORD_0": 2
          },
          "indices": 3,
          "material": 0,
          "mode": 4
        }
      ]
    }
  ],
  "nodes": [
    {
      "children": [
        1
      ],
      "matrix": [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.220446049250313e-16,
        -1.0,
        0.0,
        0.0,
        1.0,
        2.220446049250313e-16,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ],
      "name": "Sketchfab_model"
    },
    {
      "children": [
        2
      ],
      "name": "root"
    },
    {
      "children": [
        3
      ],
      "matrix": [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.220446049250313e-16,
        1.0,
        0.0,
        0.0,
        -1.0,
        2.220446049250313e-16,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ],
      "name": "GLTF_SceneRootNode"
    },
    {
      "children": [
        4
      ],
      "name": "_0"
    },
    {
      "mesh": 0,
      "name": "Object_4"
    }
  ],
  "samplers": [
    {
      "magFilter": 9729,
      "minFilter": 9987,
      "wrapS": 10497,
      "wrapT": 10497
    }
  ],
  "scene": 0,
  "scenes": [
    {
      "name": "Sketchfab_Scene",
      "nodes": [
        0
      ]
    }
  ],
  "textures": [
    {
      "sampler": 0,
      "source": 0
    }
  ]
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.jsx">
import React from "react";
import SpeechStudio from "./SpeechStudio";

function App() {
  return (
    <div className="min-h-screen bg-gray-100">
      <SpeechStudio />
    </div>
  );
}

export default App;
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/SpeechStudio.jsx">
// Text-to-Speech and Voice-to-Text React Component
// Single-file React component (default export) using Web Speech API
// Tailwind CSS classes used for styling (assumes Tailwind is available in the host app)

import React, { useEffect, useRef, useState, Suspense } from "react";
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, useGLTF, Environment } from '@react-three/drei';

// 3D Kitchen Robot - Mia Component
function RobotModel({ isSpeaking }) {
  const { nodes, materials } = useGLTF('/models/scene.gltf');
  useGLTF.preload('/models/scene.gltf'); // Update path to your .glb file
  const groupRef = useRef();
  const headRef = useRef();
  const armsRef = useRef([]);
  const { scene } = useGLTF('/models/scene.gltf');

  
  // Animation states
  const [animationState, setAnimationState] = useState('idle');
  
  // Gentle floating animation and speaking animations
  useFrame((state) => {
    if (!groupRef.current) return;
    
    // Base floating animation
    groupRef.current.position.y = Math.sin(state.clock.elapsedTime) * 0.05;
    groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.3) * 0.1;
    
    // Speaking animations
    if (isSpeaking) {
      // Head nod animation
      if (headRef.current) {
        headRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 5) * 0.1;
      }
      
      // Arm movements (subtle gestures)
      armsRef.current.forEach((arm, index) => {
        if (arm) {
          arm.rotation.z = Math.sin(state.clock.elapsedTime * 4 + index) * 0.05;
        }
      });
      
      setAnimationState('speaking');
    } else {
      // Return to idle position
      if (headRef.current) {
        headRef.current.rotation.x = 0;
      }
      
      armsRef.current.forEach((arm) => {
        if (arm) arm.rotation.z = 0;
      });
      
      setAnimationState('idle');
    }
  });

  return (
    <group ref={groupRef} scale={1.5} position={[0, -0.5, 0]} rotation={[0, Math.PI * 0.25, 0]}>
      <primitive object={nodes.Scene} />
      
      {/* Add specific part controls for animations */}
      <group 
        ref={headRef}
        name="head"
        onUpdate={self => {
          // Store references to arm parts for animation
          if (self.children) {
            self.children.forEach((child, index) => {
              if (child.name.toLowerCase().includes('arm') || child.name.toLowerCase().includes('hand')) {
                armsRef.current[index] = child;
              }
            });
          }
        }}
      />
    </group>
  );
}

// Preload the model
useGLTF.preload('/kitchen-robot-mia.glb');

// Fallback component while loading
function RobotFallback() {
  return (
    <mesh>
      <boxGeometry args={[1, 1.5, 1]} />
      <meshStandardMaterial color="#4A90E2" metalness={0.8} roughness={0.2} />
    </mesh>
  );
}

export default function SpeechStudio() {
  const [text, setText] = useState("Hello — try typing or record some speech!");
  const [speaking, setSpeaking] = useState(false);
  const [voices, setVoices] = useState([]);
  const [selectedVoice, setSelectedVoice] = useState("");
  const [rate, setRate] = useState(1);
  const [pitch, setPitch] = useState(1);
  const [lang, setLang] = useState("en-US");

  // SpeechRecognition state
  const [recognizing, setRecognizing] = useState(false);
  const [transcript, setTranscript] = useState("");
  const recogRef = useRef(null);

  // Robot animation state
  const [showRobot, setShowRobot] = useState(false);

  // Refs for stable listeners
  const synthRef = useRef(window.speechSynthesis);

  useEffect(() => {
    function loadVoices() {
      const v = synthRef.current.getVoices();
      setVoices(v);
      if (v.length && !selectedVoice) {
        const match = v.find((x) => x.lang && x.lang.startsWith(lang));
        setSelectedVoice((match && match.name) || v[0].name);
      }
    }

    loadVoices();
    window.speechSynthesis.onvoiceschanged = loadVoices;

    return () => {
      window.speechSynthesis.onvoiceschanged = null;
    };
  }, [lang, selectedVoice]);

  // Text-to-speech
  function speakText(customText) {
    setShowRobot(true);
    const utter = new SpeechSynthesisUtterance(customText ?? text);
    const chosen = voices.find((v) => v.name === selectedVoice);
    if (chosen) utter.voice = chosen;
    utter.lang = lang;
    utter.rate = rate;
    utter.pitch = pitch;

    utter.onstart = () => setSpeaking(true);
    utter.onend = () => {
      setSpeaking(false);
      setTimeout(() => setShowRobot(false), 1000);
    };
    utter.onerror = (e) => {
      console.error("SpeechSynthesis error", e);
      setSpeaking(false);
      setShowRobot(false);
    };

    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(utter);
  }

  function stopSpeaking() {
    window.speechSynthesis.cancel();
    setSpeaking(false);
    setShowRobot(false);
  }

  // Voice-to-text (SpeechRecognition)
  function initRecognition() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) return null;

    const r = new SpeechRecognition();
    r.continuous = false;
    r.interimResults = true;
    r.lang = lang;

    r.onstart = () => setRecognizing(true);
    r.onend = () => setRecognizing(false);

    r.onerror = (e) => {
      console.error("SpeechRecognition error", e);
      setRecognizing(false);
    };

    r.onresult = (ev) => {
      let interim = "";
      let final = "";
      for (let i = ev.resultIndex; i < ev.results.length; ++i) {
        const res = ev.results[i];
        if (res.isFinal) final += res[0].transcript;
        else interim += res[0].transcript;
      }
      setTranscript((prev) => (final ? prev + final : prev));
      setTranscript((prev) => prev + (interim || ""));
    };

    return r;
  }

  function startRecognition() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      alert('Speech recognition not supported in this browser. Try Chrome/Edge on desktop or Chrome on Android.');
      return;
    }
    if (!recogRef.current) recogRef.current = initRecognition();
    if (!recogRef.current) return;

    setTranscript("");
    try {
      recogRef.current.lang = lang;
      recogRef.current.start();
    } catch (e) {
      recogRef.current = initRecognition();
      recogRef.current && recogRef.current.start();
    }
  }

  function stopRecognition() {
    if (recogRef.current) {
      try { recogRef.current.stop(); } catch (e) { console.warn(e); }
    }
    setRecognizing(false);
  }

  // Helpers
  function appendTranscriptToText() {
    if (transcript.trim()) {
      setText((t) => (t ? t + "\n" + transcript : transcript));
      setTranscript("");
    }
  }

  function downloadFile(filename, content) {
    const blob = new Blob([content], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  return (
    <div className="max-w-4xl mx-auto p-6 relative">
  
      {/* 3D Kitchen Robot Animation */}
      {showRobot && (
        <div className="fixed bottom-8 right-8 z-50 w-80 h-80">
          <Canvas camera={{ position: [3, 2, 3], fov: 45 }}>
            <ambientLight intensity={0.6} />
            <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} intensity={0.8} />
            <pointLight position={[-10, -10, -10]} intensity={0.5} />
            
            <Suspense fallback={<RobotFallback />}>
              <RobotModel isSpeaking={speaking} />
              <Environment preset="dawn" />
            </Suspense>
            
            <OrbitControls 
              enableZoom={true} 
              enablePan={false}
              maxPolarAngle={Math.PI / 1.5}
              minPolarAngle={Math.PI / 6}
              minDistance={2}
              maxDistance={8}
            />
          </Canvas>
          
          {/* Speech Bubble */}
          <div className="absolute -top-16 right-full mr-4 bg-white p-3 rounded-2xl shadow-lg max-w-xs">
            <div className="text-sm text-gray-800">Speaking your text...</div>
            <div className="absolute -right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 bg-white rotate-45"></div>
          </div>
        </div>
      )}

      <h1 className="text-3xl font-bold mb-4">Speech Studio — Text ↔ Speech</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Left: Text area + TTS controls */}
        <section className="p-4 bg-white rounded-2xl shadow-sm">
          <h2 className="text-xl font-semibold mb-2">Text → Speech</h2>

          <label className="block text-sm">Language</label>
          <select value={lang} onChange={(e)=> setLang(e.target.value)} className="w-full mb-3 p-2 rounded border">
            <option value="en-US">English (US) - en-US</option>
            <option value="en-GB">English (UK) - en-GB</option>
            <option value="hi-IN">Hindi - hi-IN</option>
            <option value="es-ES">Spanish - es-ES</option>
            <option value="fr-FR">French - fr-FR</option>
            <option value="zh-CN">Chinese (Mandarin) - zh-CN</option>
          </select>

          <label className="block text-sm">Voice</label>
          <select
            className="w-full mb-3 p-2 rounded border"
            value={selectedVoice}
            onChange={(e) => setSelectedVoice(e.target.value)}
          >
            {voices.length === 0 && <option>Loading voices…</option>}
            {voices.map((v) => (
              <option key={v.name + v.lang} value={v.name}>
                {v.name} — {v.lang} {v.default ? "(default)" : ""}
              </option>
            ))}
          </select>

          <textarea
            className="w-full p-3 rounded border min-h-[140px] mb-3"
            value={text}
            onChange={(e) => setText(e.target.value)}
          />

          <div className="flex items-center gap-3 mb-3">
            <div className="flex-1">
              <label className="block text-sm">Rate: {rate.toFixed(1)}</label>
              <input type="range" min="0.5" max="2" step="0.1" value={rate} onChange={(e)=> setRate(Number(e.target.value))} />
            </div>
            <div className="flex-1">
              <label className="block text-sm">Pitch: {pitch.toFixed(1)}</label>
              <input type="range" min="0.5" max="2" step="0.1" value={pitch} onChange={(e)=> setPitch(Number(e.target.value))} />
            </div>
          </div>

          <div className="flex gap-2">
            <button className="px-4 py-2 rounded bg-indigo-600 text-white disabled:opacity-60" onClick={() => speakText(text)} disabled={speaking}>
              ▶ Speak
            </button>
            <button className="px-4 py-2 rounded border" onClick={stopSpeaking} disabled={!speaking}>
              ■ Stop
            </button>
            <button className="px-4 py-2 rounded border ml-auto" onClick={()=> downloadFile('speech-text.txt', text)}>Download</button>
          </div>
        </section>

        {/* Right: Voice recognition */}
        <section className="p-4 bg-white rounded-2xl shadow-sm">
          <h2 className="text-xl font-semibold mb-2">Speech → Text</h2>

          <p className="text-sm text-gray-600 mb-2">
            Use your microphone to record speech. Supported in Chrome/Edge (desktop & Android). Safari support varies.
          </p>

          <div className="flex gap-2 mb-3">
            <button
              className={`px-4 py-2 rounded ${recognizing ? 'bg-red-500 text-white' : 'bg-green-500 text-white'}`}
              onClick={() => (recognizing ? stopRecognition() : startRecognition())}
            >
              {recognizing ? 'Stop Recording' : 'Start Recording'}
            </button>

            <button className="px-4 py-2 rounded border" onClick={appendTranscriptToText} disabled={!transcript}>
              ➕ Add to Text
            </button>

            <button className="px-4 py-2 rounded border ml-auto" onClick={() => downloadFile('transcript.txt', transcript)} disabled={!transcript}>
              Download Transcript
            </button>
          </div>

          <label className="block text-sm">Live Transcript</label>
          <div className="min-h-[160px] p-3 rounded border bg-gray-50 whitespace-pre-wrap overflow-auto">{transcript || <span className="text-gray-400">— nothing yet —</span>}</div>

          <div className="mt-4">
            <label className="block text-sm">Recognized language (for better accuracy)</label>
            <select value={lang} onChange={(e)=> setLang(e.target.value)} className="w-full mt-2 p-2 rounded border">
              <option value="en-US">English (US) - en-US</option>
              <option value="en-GB">English (UK) - en-GB</option>
              <option value="hi-IN">Hindi - hi-IN</option>
              <option value="es-ES">Spanish - es-ES</option>
            </select>
          </div>
        </section>
      </div>

      {/* Footer: quick helpers */}
      <div className="mt-6 p-4 bg-white rounded-2xl shadow-sm">
        <h3 className="font-semibold mb-2">Quick actions</h3>
        <div className="flex gap-2 flex-wrap">
          <button className="px-3 py-2 rounded border" onClick={() => setText("")}>Clear Text</button>
          <button className="px-3 py-2 rounded border" onClick={() => setTranscript("")}>Clear Transcript</button>
          <button className="px-3 py-2 rounded border" onClick={() => { setText((t)=> t + '\n' + transcript); setTranscript(""); }}>Append Transcript to Text</button>
          <button className="px-3 py-2 rounded border" onClick={() => speakText(transcript)} disabled={!transcript}>Speak Transcript</button>
        </div>

        <p className="mt-3 text-sm text-gray-600">Notes: This app uses our browser's built-in Speech Synthesis and Speech Recognition engines — quality & available voices vary by browser and OS.</p>
      </div>
    </div>
  );
}
</file>

<file path="tailwind.config.js">
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
})
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

</files>
